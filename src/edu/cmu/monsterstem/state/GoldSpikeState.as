package edu.cmu.monsterstem.state
{
	import Box2D.Dynamics.Contacts.b2Contact;
	import com.citrusengine.objects.platformer.box2d.Sensor;
	import com.citrusengine.physics.box2d.Box2D;
	import com.citrusengine.core.CitrusEngine;
	import com.citrusengine.core.State;
	import com.citrusengine.utils.ObjectMaker2D;
	import com.citrusengine.core.CitrusObject;
	import com.citrusengine.view.ISpriteView;
	import edu.cmu.monsterstem.objects.Monster;
	import edu.cmu.monsterstem.objects.MonsterGenerator;
	import flash.events.SecurityErrorEvent;
	import flash.utils.getQualifiedClassName;
	import com.citrusengine.objects.Box2DPhysicsObject;
	/**
	 * ...
	 * @author Erik Harpstead
	 */
	public class GoldSpikeState extends State {
		private var _levelData:XML;
		private var _walkSensorR:Sensor;
		private var _walkSensorL:Sensor;
		private var _jumpSensor:Sensor;
		private var _spawner:MonsterGenerator;
		
		private var spawnDelay:Number = 3;
		private var timeSinceSpawn:Number = 0.0;;
		
		public function GoldSpikeState(levelData:XML) {
			//This is the level XML file that was generated by the Level Architect.
			_levelData = levelData;
		}
		
		override public function initialize():void {
			super.initialize();
			
			var box2D:Box2D = new Box2D("box2d");
			add(box2D);
			
			box2D.visible = true;
			
			if (_levelData)
				ObjectMaker2D.FromLevelArchitect(_levelData);
			
			_walkSensorR = getObjectByName("rightSensor") as Sensor;
			_walkSensorL = getObjectByName("leftSensor") as Sensor;
			_jumpSensor = getObjectByName("jumpSensor") as Sensor;
			_spawner = getObjectByName("generator") as MonsterGenerator;
			
			_walkSensorR.onBeginContact.add(startWalkRight);
			_walkSensorL.onBeginContact.add(startWalkLeft);
			_jumpSensor.onBeginContact.add(startJump);
			
			/*for each (var co:CitrusObject in getObjectsByType(CitrusObject)) {
				CitrusEngine.dbg(co.name + " : " + (co is ISpriteView ? (co as ISpriteView).view : ""),this,"viewcheck");
			}*/
		}
		
		override public function update(timeDelta:Number):void {
			super.update(timeDelta);
			timeSinceSpawn += timeDelta;
			if (timeSinceSpawn >= spawnDelay) {
				spawnMonster();
				timeSinceSpawn = 0;
			}
		}
		
		private function spawnMonster():void {
			_spawner.spawnMonster();
		}
		
		private function startWalkRight(contact:b2Contact):void {
			var other:Box2DPhysicsObject =  Box2DPhysicsObject.CollisionGetOther(_walkSensorR, contact);
			
			//	CitrusEngine.dbg("startWalk() other is :" + getQualifiedClassName(e.other.GetBody().GetUserData()),this,"sensor");
			if (other is Monster) {
				(other as Monster).walk(Monster.RIGHT);
			}
		}
		
		private function startWalkLeft(contact:b2Contact):void {
			var other:Box2DPhysicsObject =  Box2DPhysicsObject.CollisionGetOther(_walkSensorL, contact);
			//	CitrusEngine.dbg("startWalk() other is :" + getQualifiedClassName(e.other.GetBody().GetUserData()), this,"sensor");
			if (other is Monster) {
				(other as Monster).walk(Monster.LEFT);
			}
		}
		
		private function startJump(contact:b2Contact):void {
			var other:Box2DPhysicsObject =  Box2DPhysicsObject.CollisionGetOther(_jumpSensor, contact);
			if (other is Monster) {
				(other as Monster).jump();
			}
		}
	}
}